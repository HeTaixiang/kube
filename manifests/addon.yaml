---
# heapster-deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: heapster-v1.2.0
  namespace: kube-system
  labels:
    k8s-app: heapster
    kubernetes.io/cluster-service: "true"
    version: v1.2.0
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: heapster
      version: v1.2.0
  template:
    metadata:
      labels:
        k8s-app: heapster
        version: v1.2.0
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      containers:
      - image: docker.zhimei360.com/heapster-amd64:v1.2.0
        name: heapster
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8082
            scheme: HTTP
          initialDelaySeconds: 180
          timeoutSeconds: 5
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 80m
            memory: 200Mi
          requests:
            cpu: 80m
            memory: 200Mi
        command:
        - /heapster
        - --source=kubernetes.summary_api:''
      - image: docker.zhimei360.com/heapster-amd64:v1.2.0
        name: eventer
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
        command:
        - /eventer
        - --source=kubernetes:''
        - --sink=influxdb:http://monitoring-influxdb:8086
      - image: docker.zhimei360.com/addon-resizer-amd64:1.6
        name: heapster-nanny
        resources:
          limits:
            cpu: 50m
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 100Mi
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        command:
        - /pod_nanny
        - --cpu=100m
        - --extra-cpu=0m
        - --memory=300Mi
        - --extra-memory=4Mi
        - --threshold=5
        - --deployment=heapster-v1.2.0
        - --container=heapster
        - --poll-period=300000
      - image: docker.zhimei360.com/addon-resizer-amd64:1.6
        name: eventer-nanny
        resources:
          limits:
            cpu: 50m
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 100Mi
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        command:
        - /pod_nanny
        - --cpu=100m
        - --extra-cpu=0m
        - --memory=300Mi
        - --extra-memory=500Ki
        - --threshold=5
        - --deployment=heapster-v1.2.0
        - --container=eventer
        - --poll-period=300000
      dnsPolicy: ClusterFirst

---
# heapster-service
kind: Service
apiVersion: v1
metadata:
  name: heapster
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "Heapster"
spec:
  ports:
  - port: 80
    targetPort: 8082
  selector:
    k8s-app: heapster

---
# influxdb-grafana-controller
apiVersion: v1
kind: ReplicationController
metadata:
  name: monitoring-influxdb-grafana-v3
  namespace: kube-system
  labels:
    k8s-app: influxGrafana
    version: v3
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 1
  selector:
    k8s-app: influxGrafana
    version: v3
  template:
    metadata:
      labels:
        k8s-app: influxGrafana
        version: v3
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
      - image: docker.zhimei360.com/heapster_influxdb-amd64:v1.2.0
        name: influxdb
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 500Mi
        ports:
        - containerPort: 8083
        - containerPort: 8086
        volumeMounts:
        - name: influxdb-persistent-storage
          mountPath: /data
      - image: docker.zhimei360.com/heapster_grafana-amd64:v1.2.0
        name: grafana
        env:
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        # This variable is required to setup templates in Grafana.
        - name: INFLUXDB_SERVICE_URL
          value: http://monitoring-influxdb:8086
          # The following env variables are required to make Grafana accessible via
          # the kubernetes api-server proxy. On production clusters, we recommend
          # removing these env variables, setup auth for grafana, and expose the grafana
          # service using a LoadBalancer or a public IP.
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: Admin
        - name: GF_SERVER_ROOT_URL
          value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/
        volumeMounts:
        - name: grafana-persistent-storage
          mountPath: /var
      volumes:
      - name: influxdb-persistent-storage
        emptyDir: {}
      - name: grafana-persistent-storage
        emptyDir: {}
      dnsPolicy: ClusterFirst
---
# grafana-service
apiVersion: v1
kind: Service
metadata:
  name: monitoring-grafana
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "Grafana"
spec:
# On production clusters, consider setting up auth for grafana, and
# exposing Grafana either using a LoadBalancer or a public IP.
# type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    k8s-app: influxGrafana

---
# influxdb-service
apiVersion: v1
kind: Service
metadata:
  name: monitoring-influxdb
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "InfluxDB"
spec:
  ports:
  - name: http
    port: 8083
    targetPort: 8083
  - name: api
    port: 8086
    targetPort: 8086
  selector:
    k8s-app: influxGrafana

---
# kube-dashboard-controller
apiVersion: v1
kind: ReplicationController
metadata:
  name: kubernetes-dashboard-v1.5.0
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    version: v1.5.0
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 1
  selector:
    k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
        version: v1.5.0
        kubernetes.io/cluster-service: "true"
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      containers:
      - name: kubernetes-dashboard
        image: docker.zhimei360.com/kubernetes-dashboard-amd64:v1.5.0
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        ports:
        - containerPort: 9090
        livenessProbe:
          httpGet:
            path: /
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
      dnsPolicy: ClusterFirst
---
# kube-dashboard-service
apiVersion: v1
kind: Service
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    k8s-app: kubernetes-dashboard
  ports:
  - port: 80
    targetPort: 9090
