# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'

Vagrant.require_version ">= 1.6.0"

$controller_count = 1
$worker_count = 2
$worker_vm_memory = 2048
$etcd_count = 3


if $worker_vm_memory < 2048
  puts "Workers should have at least 1024 MB of memory"
end

WORKER_CLOUD_CONFIG_PATH = File.expand_path("../../script/worker-install.sh")
BOX_URL = File.expand_path("../../box/debian-jessie-x64")

def etcdIP(num)
  return "192.168.1.#{num+230}"
end

def controllerIP(num)
  return "192.168.1.#{num+233}"
end

def workerIP(num)
  return "192.168.1.#{num+240}"
end

controllerIPs = [*1..$controller_count].map{ |i| controllerIP(i) }
etcdIPs = [*1..$etcd_count].map{ |i| etcdIP(i) }
etcd_endpoints = etcdIPs.map.with_index{ |ip, i| "http://#{ip}:2379" }.join(",")

def provisionMachineSSL(machine,certBaseName,cn,ipAddrs)
  tarFile = "../ssl/#{cn}.tar"
  ipString = ipAddrs.map.with_index { |ip, i| "IP.#{i+1}=#{ip}"}.join(",")
  system("./../../lib/init-ssl ../ssl #{certBaseName} #{cn} #{ipString}") or abort("failed generating #{cn} SSL artifacts")
  machine.vm.provision :file, :source => tarFile, :destination => "/tmp/ssl.tar"
  machine.vm.provision :shell, :inline => "mkdir -p /etc/kubernetes/ssl && tar -C /etc/kubernetes/ssl -xf /tmp/ssl.tar", :privileged => true
end

Vagrant.configure("2") do |config|
  # always use Vagrant's insecure key
  config.ssh.insert_key = false
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"
  # box config
  config.vm.box = "debian-jessie-x64"
  config.vm.box_check_update = false
  config.vm.box_url = "file://#{BOX_URL}"
  # config.vm.box = "centos/7"
  # config.vm.box_version = ">=1610.01"
  # config.vm.box_check_update = false
  # config.vm.box_url = "https://atlas.hashicorp.com/centos/boxes/7"

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.provider :virtualbox do |vb|
    vb.cpus = 1
    vb.gui = false
  end

  (1..$worker_count).each do |i|
    config.vm.define vm_name = "w%d" % i do |worker|
      worker.vm.hostname = vm_name

      env_file = Tempfile.new('env_file', :binmode => true)
      env_file.write("ETCD_ENDPOINTS=#{etcd_endpoints}\n")
      env_file.write("CONTROLLER_ENDPOINT=https://#{controllerIPs[0]}\n")
      env_file.close

      worker.vm.provider :virtualbox do |vb|
        vb.memory = $worker_vm_memory
      end

      workerIP = workerIP(i)
      worker.vm.network :public_network, ip: workerIP, bridge: "en0: Ethernet"

      # each worker node get themself cert
      provisionMachineSSL(worker,"worker","kube-worker-#{workerIP}",[workerIP])
      # upload env
      worker.vm.provision :file, :source => "../../script/config.json", :destination => "/tmp/config.json"
      worker.vm.provision :shell, :inline => "mkdir -p $HOME/.docker /.docker && cp /tmp/config.json $HOME/.docker && cp /tmp/config.json /.docker", :privileged => true
      worker.vm.provision :file, :source => env_file, :destination => "/tmp/coreos-kube-options.env"
      worker.vm.provision :shell, :inline => "mkdir -p /run/kubelet && mv /tmp/coreos-kube-options.env /run/kubelet/options.env", :privileged => true
      # upload service
      worker.vm.provision :file, :source => "../../service/bootstrap-docker.service", :destination => "/tmp/bootstrap-docker.service"
      worker.vm.provision :file, :source => "../../service/flannel.service", :destination => "/tmp/flannel.service"
      worker.vm.provision :file, :source => "../../service/worker/kubelet.service", :destination => "/tmp/kubelet.service"
      # upload manifests
      worker.vm.provision :file, :source => "../../manifests/kube-proxy.yaml", :destination => "/tmp/kube-proxy.yaml"
      worker.vm.provision :file, :source => "../../manifests/work-kubeconfig.yaml", :destination => "/tmp/work-kubeconfig.yaml"
      # reposition
      worker.vm.provision :shell, :inline => "mv /tmp/*.service /etc/systemd/system/", :privileged => true
      worker.vm.provision :shell, :inline => "mkdir -p /etc/kubernetes/manifests && mv /tmp/kube-proxy.yaml /etc/kubernetes/manifests && mv /tmp/work-kubeconfig.yaml /etc/kubernetes", :privileged => true
      # upload script
      worker.vm.provision :file, :source => "../../script/util.sh", :destination => "/tmp/util.sh"
      worker.vm.provision :file, :source => "../../script/docker.sh", :destination => "/tmp/docker.sh"
      worker.vm.provision :file, :source => "../../script/flannel-docker.sh", :destination => "/tmp/flannel-docker.sh"
      worker.vm.provision :file, :source => "../../script/kubelet.sh", :destination => "/tmp/kubelet.sh"
      worker.vm.provision :file, :source => WORKER_CLOUD_CONFIG_PATH, :destination => "/tmp/worker-install.sh"
      worker.vm.provision :shell, :inline => "cd /tmp && ./worker-install.sh", :privileged => true
    end
  end

end
